local Player = game.Players.LocalPlayer
local Http = game:GetService("HttpService")
local TPS = game:GetService("TeleportService")
local Api = "https://games.roblox.com/v1/games/"

local _place, _id = game.PlaceId, game.JobId
local _servers = Api.._place.."/servers/Public?sortOrder=Desc&limit=100"

local groupIds = {5060810}
local Moderators = {"BuildIntoGames"}

function ListServers(cursor)
    local Raw = game:HttpGet(_servers .. ((cursor and "&cursor="..cursor) or ""))
    return Http:JSONDecode(Raw)
end

local retryAttempts = 3
local Next
local lastServerId

local function hopServer()
    local Servers = ListServers(Next)

    for i, v in next, Servers.data do
        if v.playing < v.maxPlayers and v.id ~= _id and v.id ~= lastServerId then
            if v.playing >= v.maxPlayers then
                print("Skipped server:", v.id, "as it is now full.")
                continue
            end

            for attempt = 1, retryAttempts do
                local success, errorInfo = pcall(TPS.TeleportToPlaceInstance, TPS, _place, v.id, Player)

                if success then
                    print("Successfully teleported to server:", v.id)
                    lastServerId = v.id
                    return
                else
                    print("Failed to teleport to server:", v.id, "Error:", errorInfo)
                    wait(1)
                end
            end
        end
    end

    Next = Servers.nextPageCursor
    print("No available servers to teleport.")
end

local function checkPlayer(player)
    for _, groupId in ipairs(groupIds) do
        local success, result = pcall(function()
            return game:GetService("GroupService"):IsInGroup(player.UserId, groupId)
        end)

        if success and result then
            hopServer()
            break
        end
    end

    for _, username in ipairs(Moderators) do
        if player.Name == username then
            hopServer()
            break
        end
    end
end

for _, player in ipairs(game.Players:GetPlayers()) do
    checkPlayer(player)
end

game.Players.PlayerAdded:Connect(function(player)
    checkPlayer(player)
end)

while Player:IsDescendantOf(game) do
    hopServer()
end
